player = game.Players.LocalPlayer
character= player.character
humanoid = character.Humanoid
rootpart = character.HumanoidRootPart
camera = workspace.CurrentCamera
--little explanation - this is for exploits, so whenever ANY function has to be called, all of this is code is ran

function PlayerAddAttribute(Name, Default)
if character:GetAttribute(Name) == nil then 
character:SetAttribute(Name, Default)
else
--hi
end
end

--Any attributes you'll ever use in any function must be called here.
PlayerAddAttribute("fly",false)

function delete(Part)
Part:Destroy()
print("Deleted "..Part:GetFullName())
end

function deleteall(Part)
for i, v in Part:GetChildren() do v:destroy() end
print("Deleted all children of "..Part:GetFullName())
end

function printchildren(Part)
print("Children of "..Part:GetFullName().." are:")
for i, v in Part:GetChildren() do print(v) end
print("end")
end

function create(Type, Parent)
part = Instance.new(Type)
part.Parent = Parent
print("Part "..Type.." Created at "..Parent:GetFullName())
end

function resize(Part, X, Y, Z)
Part.Size = Vector3.new((Part.Size.X + X),(Part.Size.Y + Y),(Part.Size.Z + Z))
print(Part:GetFullName().."'s Size Increased By "..X.." "..Y.." "..Z.." Studs")
end

function move(Part, X, Y, Z)
Part.CFrame = Part.CFrame * CFrame.new(X, Y, Z)
print(Part:GetFullName().." Moved By "..X.." "..Y.." "..Z.." Studs")
end

function rotate(Part, X, Y, Z)
Part.CFrame = Part.CFrame * CFrame.Angles(math.rad(X),math.rad(Y),math.rad(Z))
print(Part:GetFullName().." Rotated "..X.." "..Y.." "..Z.." Degrees")
end

function size(Part, X, Y, Z)
Part.Size = Vector3.new(X, Y, Z)
print(Part:GetFullName().."'s Size Set To"..X.." "..Y.." "..Z.." Studs")
end

function position(Part, X, Y, Z)
Part.Position = Vector3.new(X, Y, Z)
print(Part:GetFullName().."'s Position Set To "..X.." "..Y.." "..Z)
end

function rotation(Part, X, Y, Z)
Part.Rotation = Vector3.new(X,Y,Z)
print(Part:GetFullName().."'s Rotation Set To "..X.." "..Y.." "..Z.." Degrees")
end

function highlight(Parent, AlwaysOnTop, FillTransparency, FillColor, OutlineTransparency, OutlineColor)
local FillColor2 = BrickColor.New(FillColor)
local OutlineColor2 = BrickColor.New(OutlineColor)
local highlight = Instance.new("Highlight")
highlight.Parent = Parent
highlight.Adornee = Parent
if AlwaysOnTop == true then
highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
else
highlight.DepthMode = Enum.HighlightDepthMode.Occluded
end
highlight.FillTransparency = FillTransparency
highlight.FillColor = FillColor2.Color
highlight.OutlineTransparency = OutlineTransparency
highlight.OutlineColor = OutlineColor2.Color
print("Created a Highlight with "..OutlineTransparency.." Outline Transparency, "..FillTransparency.." FillTransparency, ".. OutlineColor2.." Outline Colors, "..FillColor2.." Fill Colors")
end

function tp(Part)
rootpart.CFrame = Part.CFrame
end

function target(player)
target = game.Players:FindFirstChild(player)
end

function fly()
character:SetAttribute("fly", not character:GetAttribute("fly"))
end
game:GetService("UserInputService").JumpRequest:connect(function()
if character:GetAttribute("fly") then
humanoid:ChangeState("Jumping")
end
end)

function impulse(Part, X, Y, Z)
local Vector3 = Vector3.new(X, Y, Z)
Part:ApplyImpulse(Vector3)
end

print("ProgramausAPI ran")
